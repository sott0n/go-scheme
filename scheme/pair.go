// Pair is a type which is generated by cons procedure.
// Pair has two pointers, which are named car and cdr.
//
// List is expressed by linked of Pair.
// And procedure application has list which consists of Pair.
// as its arguments.

package scheme

// Pair is a struction for car and cdr.
type Pair struct {
	ObjectBase
	Car         Object
	Cdr         *Pair
	environment *Environment
}

// String is a string function with accessing Pair.
func (p *Pair) String() string {
	if p.IsEmpty() {
		return "()"
	}
	return "Not implemented."
}

// EvaledCar is applying Car procedure.
func (p *Pair) EvaledCar() Object {
	switch p.Car.(type) {
	case *Application:
		return p.Car.(*Application).applyProcedure()
	default:
		return p.Car
	}
}

// IsList is checking wether is list or not.
func (p *Pair) IsList() bool {
	return true
}

// IsEmpty is checking empty value.
func (p *Pair) IsEmpty() bool {
	return p.Car == nil && p.Cdr == nil
}

// ListLength returns length of list.
func (p *Pair) ListLength() int {
	if p.IsEmpty() {
		return 0
	}
	return p.Cdr.ListLength() + 1
}
